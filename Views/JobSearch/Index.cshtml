@model Job_Portal_Project.ViewModels.JobSearchViewModel
@{
    ViewData["Title"] = "Browse Jobs";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="page-header">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="inner-header text-left">
                    <h3 class="mb-2">Browse Jobs</h3>
                    <p class="header-description">
                        Browse all available jobs and take the first step toward your future. <br />
                        Find your perfect career opportunity from our curated job listings.</p>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb bg-transparent p-0">
                            <li class="breadcrumb-item"><a href="/Home/Index">Home</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Browse Jobs</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Remove redundant hero section -->
<!-- <div class="slider-area">...</div> -->
<!-- Page Header End -->




<!-- Job List Area Start -->
<div class="job-listing-area pt-120 pb-120">
    <div class="container">
        <div class="row">
            <!-- Left content - Filters -->
            <div class="col-xl-3 col-lg-3 col-md-4">
                <div class="filter-wrapper">
                    <div class="filter-header d-flex justify-content-between align-items-center">
                        <h4 class="m-0"><i class="lni-filter mr-2"></i>Filter Jobs</h4>
                        <button class="btn btn-sm btn-link d-md-none" type="button" data-toggle="collapse" data-target="#filterContent">
                            <i class="lni-menu"></i>
                        </button>
                    </div>

                    <div id="filterContent" class="collapse show">
                        <!-- Keyword Search -->
                        <div class="filter-group">
                            <label>Search</label>
                            <div class="input-group">
                                <input type="text" class="form-control form-control-sm" id="keyword" placeholder="Job title or keywords" value="@Model.Keyword">
                                <div class="input-group-append">
                                    <span class="input-group-text"><i class="lni-search"></i></span>
                                </div>
                            </div>
                        </div>

                        <!-- Job Category -->
                        <div class="filter-group">
                            <label>Job Category</label>
                            <select class="form-control form-control-sm h-auto" id="category">
                                <option value="">All Categories</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Id" selected="@(Model.CategoryId == category.Id)">@category.Name</option>
                                }
                            </select>
                        </div>

                        <!-- Job Type -->
                        <div class="filter-group">
                            <label>Job Type</label>
                            <div class="custom-control-compact">
                                @foreach (var type in Model.EmploymentTypes)
                                {
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" id="type-@type" name="employmentType" class="custom-control-input filter-checkbox"
                                               value="@type" data-filter-group="jobType" @(Model.EmploymentType == type ? "checked" : "")>
                                        <label class="custom-control-label" for="type-@type">@type</label>
                                    </div>
                                }
                            </div>
                        </div>
                          <!-- Job Location -->
                                <div class="filter-group">
                                    <label>Job Location</label>
                                    <select class="form-control form-control-sm h-auto" id="location">
                                        <option value="">Anywhere</option>
                                        @foreach (var location in Model.Locations)
                                        {
                                            <option value="@location" selected="@(Model.Location == location)">@location</option>
                                        }
                                    </select>
                                </div>

                           <!-- Experience -->
                        <div class="filter-group">
                            <label>Experience</label>
                             <div class="custom-control-compact">
                                        @foreach (var level in Model.ExperienceLevels)
                                        {
                                        <div class="custom-control custom-checkbox">
                                                <input type="checkbox" id="exp-@level" name="experienceLevel" class="custom-control-input" value="@level" @(Model.ExperienceLevel == level ? "checked" : "")>
                                                <label class="custom-control-label" for="exp-@level">@level</label>
                                        </div>
                                        }
                                    </div>
                         </div>
                        <button type="button" class="btn btn-primary btn-block btn-sm mt-3" id="applyFilters">Apply Filters</button>
                        <button type="button" id="clearAllFilters" class="btn btn-danger btn-block btn-sm">Clear All </button>

                    </div>
                </div>
            </div>
            
            <!-- Right content - Job Listings -->
            <div class="col-xl-9 col-lg-9 col-md-8">
                @* condition to show the message if no job found  *@
                @if (!string.IsNullOrEmpty(ViewBag.NoResultsMessage))
                {
                    <div class="alert alert-info">
                        @ViewBag.NoResultsMessage
                    </div>
                }

              
                @* <!--part of number of jobs founnd in the websitr --> *@
                <section class="featured-job-area">
                    <div class="container">
                        <!-- Count of Job list -->
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="count-job mb-35">
                                    <span class="text-primary fw-bold">@Model.TotalJobs Jobs found</span>
                                    <div class="select-job-items">
                                        <!-- Select options go here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
                        
                <!-- Job Listings view mode to view all jobs as cards  with partial view -->
                <div id="jobListingsContainer">
                            @await Html.PartialAsync("_JobListPartial", Model.Jobs)
                </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
</div>
<!-- Job List Area End -->

<!-- Start pagination -->               

@if (Model.TotalPages > 1)
{
    <div class="pagination-area py-4 text-center">
        <div class="container">
            <div class="row">
                <div class="col-xl-12">
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            @if (Model.CurrentPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="#" data-page="@(Model.CurrentPage - 1)" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            }

                            @{
                                var startPage = Math.Max(1, Model.CurrentPage - 2);
                                var endPage = Math.Min(Model.TotalPages, startPage + 4);

                                if (startPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="#" data-page="1">1</a>
                                    </li>

                                    if (startPage > 2)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                }

                                for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="#" data-page="@i">@i</a>
                                    </li>
                                }

                                if (endPage < Model.TotalPages)
                                {
                                    if (endPage < Model.TotalPages - 1)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }

                                    <li class="page-item">
                                        <a class="page-link" href="#" data-page="@Model.TotalPages">@Model.TotalPages</a>
                                    </li>
                                }
                            }

                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="#" data-page="@(Model.CurrentPage + 1)" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Filter application
            $('#applyFilters').click(function() {
                applyFilters(1); // Reset to page 1 when applying filters
            });

            // Pagination click
            $(document).on('click', '.page-link', function(e) {
                e.preventDefault();
                var page = $(this).data('page');
                if (page) {
                    applyFilters(page);
                }
            });

            // Handle all checkboxes with class "filter-checkbox"
            $('.filter-checkbox').change(function() {
                var filterGroup = $(this).data('filter-group');
                console.log("Changed filter in group:", filterGroup);
            });

            // Function to clear a specific filter group
            function clearFilterGroup(groupName) {
                $('input[data-filter-group="' + groupName + '"]').prop('checked', false);
            }

              // clear all filters // Clear All Filters
                $('#clearAllFilters').click(function() {
                    // Reset input fields
                    $('#keyword').val('');
                    $('#category').val('');
                    $('#location').val('');

                    // Uncheck all checkboxes
                    $('input[name="employmentType"]').prop('checked', false);
                    $('input[name="experienceLevel"]').prop('checked', false);

                    // Re-apply filters (load page 1)
                    applyFilters(1);
                });
            // Apply filters function
            function applyFilters(page = 1) {
                // Get all checked employment types
                var employmentTypes = [];
                $('input[name="employmentType"]:checked').each(function() {
                    employmentTypes.push($(this).val());
                });

                // Get all checked experience levels
                var experienceLevels = [];
                $('input[name="experienceLevel"]:checked').each(function() {
                    experienceLevels.push($(this).val());
                });

                var filters = {
                    keyword: $('#keyword').val(),
                    categoryId: $('#category').val(),
                    location: $('#location').val(),
                    employmentType: employmentTypes.join(','),
                    experienceLevel: experienceLevels.join(','),
                    currentPage: page,
                    pageSize: @Model.PageSize
                };

                console.log("Applying filters:", filters);

                // Show loading indicator if needed
                

                $.ajax({
                    url: '@Url.Action("Search", "JobSearch")',
                    type: 'POST',
                    data: filters,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(result) {
                        $('#jobListingsContainer').html(result);
                        updateUrl(filters, page);
                    
                    },
                    error: function(xhr, status, error) {
                        console.error("Error applying filters:", error);
                
                    }
                });
            }

            function updateUrl(filters, currentPage) {
                
                var url = window.location.pathname + '?';
                var params = [];

                if (filters.keyword) params.push('keyword=' + encodeURIComponent(filters.keyword));
                if (filters.categoryId) params.push('categoryId=' + encodeURIComponent(filters.categoryId));
                if (filters.location) params.push('location=' + encodeURIComponent(filters.location));
                if (filters.employmentType) params.push('employmentType=' + encodeURIComponent(filters.employmentType));
                if (filters.experienceLevel) params.push('experienceLevel=' + encodeURIComponent(filters.experienceLevel));
                params.push('page=' + currentPage);

                history.pushState(null, '', url + params.join('&'));
            }
        });

               
    </script>
}
